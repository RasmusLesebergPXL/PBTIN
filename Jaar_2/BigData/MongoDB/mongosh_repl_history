db.movieDetails.findOne()
db.movieDetails.find({'countries.0':{$ne:'USA'}}).count()
db.movieDetails.find({'awards.wins':0},{title:1,_id:0}).skip(19).limit(1)
db.movieDetails.find({'awards.nominations':0},{title:1,_id:0}).skip(19).limit(1)
db.movieDetails.find({'awards.text':/nominations/},{title:1,'awards.nominations':1,'awards.text':1,_id:0})
db.movieDetails.find({'awards.text':/nominations/},{title:1,'awards.nominations':1,'awards.text':1,_id:0}).count()
db.movieDetails.find({'tomato.meter':{$gt:79}}).count()
db.movieDetails.find({'awards.wins':20},{title:1,_id:0,'awards.nominations':1}).count()
db.movieDetails.find({'awards.wins':20},{title:1,_id:0,'awards.nominations':1})
db.movieDetails.findOne()
db.movideD.findOne()
db.movieDetails.find({$and:[{countries:{$nin:['USA','UK']}},{countries:/France/},{countries:/Belgium/}]},{title:1,producer:1,countries:1,actors:1,_id:0}).count()
db.movieDetails.find({$or:[{$and:[{countries:{$nin:['USA','UK']}},{countries:/Belgium/}]},{$and:[{countries:{$nin:['USA','UK']}},{countries:/France/}]}]},{title:1,producer:1,countries:1,actors:1,_id:0}).skip(50).limit(1)
db.movieDetails.find({$or:[{$and:[{title:/west/i},{countries:/New Zealand/}]},{actors:/Bruce Willis/}]}).count()
db.movieDetails.find({$and:[{countries:{$all:['UK','USA']}},{$or:[{year:2004},{year:2012}]}]},{title:1,countries:1,year:1,_id:0})
db.movieDetails.find({$and:[{countries:{$all:['UK','USA']}},{$or:[{year:2004},{year:2012}]}]},{title:1,countries:1,year:1,_id:0}).count()
db.movieDetails.find({countries:{$size:4}}).count()
db.movieDetails.find({$and:[{$or:[{'genres.1':'Comedy'},{'genres.0':'Comedy'}]},{'countries.0':'USA'},{$and:[{year:{$gt:2009}},{year:{$lt:2015}}]}]},{title:1,genres:1,countries:1,year:1,_id:0}).skip(5).limit(10)
db.movieDetails.find({$and:[{'genres.1':'Comedy'},{'countries.0':'USA'},{$and:[{year:{$gt:2009}},{year:{$lt:2015}}]}]},{title:1,genres:1,year:1,countries:1,_id:0}).skip(5).limit(10)
db.movieDetails.find({$and:[{genres:/Comedy/},{$and:[{countries:/USA/},{countries:/UK/}]}]},{title:1,countries:1,genres:1,_id:0}).skip(5).limit(20)
db.movieDetails.find({$and:[{genres:/Comedy/},{countries:{$in:['USA','UK']}}]},{title:1,countries:1,genres:1,_id:0}).skip(5).limit(20)
db.movieDetails.find($and:[{genres:/Comedy/},{countries:{$in:['USA','UK']}}]},{title:1,countries:1,genres:1,_id:0}).skip(5).limit(20)
db.movieDetails.find({$and:[{countries:{$all:['USA']}},{genres:{$all:['Western','Comedy']}}]},{title:1,countries:1,_id:0,genres:1}).skip(2).limit(10)
db.movieDetails.find({$and:[{countries:{$all:['USA']}}},{genres:{$all:['Western','Comedy']}}]},{title:1,countries:1,_id:0,genres:1}).skip(2).limit(10)
db.movieDetails.find({$and:[{$and:[{countries:/USA/},{countries:{$size:1}}]},{genres:{$all:['Western','Comedy']}}]},{title:1,countries:1,_id:0,genres:1}).skip(2).limit(10)
db.movieDetails.find({$and:[{$and:[{countries:/USA/},{countries:{$size:1}}]},{$and:[{genres:{$in:['Western','Comedy']}},{genres:{$size:2}}]}]}).limit(10).skip(2)
db.movieDetails.find({$and:[{$and:[{countries:/USA/},{countries:{$size:1}}]},{$and:[{genres:{$in:['Western','Comedy']}},{genres:{$size:2}}]}]},{title:1,genres:1,countries:1,_id:0}).skip(2).limit(10)
db.movieDetails.find({$and:[{$and:[{countries:/USA/},{countries:{$size:1}}]},{$and:[{genres:{$in:['Western','Comedy']}},{genres:{$size:2}}]}]},{title:1,genres:1,countries:1,_id:0}).slip(2).limit(10)
db.movieDetails.find({$and:[{$and:[{countries:/USA/},{countries:{$size:1}}]},{$and:[{genres:{$in:['Western','Comedy']}},{genres:{$size:2}}]}],{title:1,genres:1,countries:1,_id:0}).slip(2).limit(10)
db.movieDetails.find({$and:[{$and:[{countries:/USA/},{countries:{$size:1}}]},{genres:/Crime/}]},{title:1,countries:1,genres:1,_id:0}).limit(10)
db.movieDetails.find({$and:[$and:[{countries:/USA/},{countries:{$size:1}}]},{genres:/Crime/}]},{title:1,countries:1,genres:1,_id:0}).limit(10)
db.movieDetails.find({'awards.wins':2}).count()
db.movieDetails.find({$and:[{writers:/Sergio Donati/i},{writers:/Sergio Leone/i}]},{title:1,_id:0})
db.movieDetails.find()
db.movieDetails.find({$or:[{$and:[{countries:/UK/},{countries:{$size:1}}]},{$and:[{countries:/US/},{countries:{$size:1}}]}]}).count()
db.movieDetails.find({$or:[{$and:[{countries:/US/},{countries:{$size:1}}]},{$and:[{countries:/UK/},{countries:{$size:1}}]}]}).count()
db.movieDetails.find({$and:[{countries:/US/},{countries:/UK/}]}).count()
db.movieDetails.find({$or:[{actors:{$in:['Harrison Ford']}},{actors:{$in:['Dennis Hopper']}}]},{title:1,actors:1,_id:0}).count()
db.movieDetails.find({$or:[{actors:{$in:['Harrison Ford']}},{actors:{$in:['Dennis Hopper']}}]},{title:1,actors:1,_id:0})
db.movieDetails.find({$or:[{year:2000},{year:2010}]}).count()
db.movieDetails.find({$or:[{year:2000}},{year:2010}}]}).count()
db.movieDetails.find({ $and: [ { countries: { $nin: ["USA", "UK"] } }, { countries: { $exists: true } }] }, { title: 1, countries: 1 })
db.movieDetails.find({ $and: [ { countries: { $nin: ["USA", "UK"] } }, { countries: { $exists: true } }] }, { title: 1, countries: 1 }).count()
db.movieDetails.find({ $and: [ { countries: { $nin: ["USA", "UK"] } }, { countries: { $exists: true, $ne: [] } }] }, { title: 1, countries: 1 }).count()
db.movieDetails.find({$and:[{countries:{$nin:['US']}},{countries:{$nin:['UK']}}]},{title:1,countries:1,_id:0}).count()
db.movieDetails.find({countries:{$nin:['US','UK']}},{title:1,year:1,_id:0}).count()
db.movieDetails.find({$and:[{countries:{$nin:['US']}},{countries:{$nin:['UK']}}]},{title:1,countries:1,_id:0}).count()
db.movieDetails.find({$or:[{countries:{$nin:['US']}},{countries:{$nin:['UK']}}]},{title:1,countries:1,_id:0}).count()
db.movieDetails.find({$and:[{countries:{$nin:['US']}},{countries:{$nin:['UK']}}]},{title:1,countries:1,_id:0}).count()
db.movieDetails.find({$or:[{countries:{$nin:['US']}},{countries:{$nin:['UK']}}]},{title:1,countries:1,_id:0}).count()
db.movieDetails.find({countries:{$nin:['US','UK']}},{title:1,year:1,_id:0}).count()
db.movieDetails.find({countries:{$nin:['US','UK']}},{title:1,year:1,_id:0})
db.movieDetails.find({countries:{$nin['US','UK']}},{title:1,year:1,_id:0})
db.movieDetails.find({$or:[{countries:{$nin:'US'}},{countries:{$nin:'UK'}}]},{title:1,countries:1,_id:0}).count()
db.movieDetails.find()
db.movieDetails.find({$and:[{year:{$gt:2013}},{year:{$lt:2018}}]},{title:1,year:1,_id:0}).sort({year:1})
db.movieDetails.find({$and:[{year:{$gt:2013}},{year:{$lt:2018}}]}).count()
db.movieDetails.find({$and:[{year:{$gt:2014}},{year:{$lt:2017}}]}).count()
show collections
use video
show collections
db.movieDetails.find({$and:[{year:{$gt:2014}},{year:{$lt:2017}}]}).count()
use videos
use vide
db.movieDetails.find()
db.movieDetails.find({$and:[{year:{$gt:2014}},{year:{$lt:2017}}]})
db.mobieDetails.find({$and:[{year:{$gt:2014}},{year:{$lt:2017}}]})
db.movieDetails.find({year:{$gt:2014,$lt:2017}},{title:1,year:1,_id:0}).sort({year:1})
db.movieDetails.find({title:/Star Wars/}).count()
db.movieDetails.find({actors:/^Gary/},{title:1,_id:0}).sort({title:1})
db.movieDetails.find({actors:/^Gary/},{title:1,_id:0}).sort({title:1}).count()
db.movieDetails.find({runtime:{$gt:120}}).count()
db.movieDetails.find({director:'George Lucas'},{title:1,_id:0}).sort({title:1})
db.movieDetails.find({actors:/Jeff Bennett/}).count()
db.movieDetails.find({rated:'UNRATED'}).count()
db.movieDetails.find()
db.movieDetails.find({ director: 'Stanley Kubrick' }, { title: 1, _id: 0 })
db.movies.find({year:1982},{title:1,year:1,_id:0})
db.movies.find({year:1982},{title:1,year:1,_id:0}).count()
db.movies.find({year:1982},{title:1,year:1,_id:0})
db.movieDetails.find({},{title:1,_id:0}).sort({year:1}).limit(1).skip(99)
db.movieDetails.find({},{title:1,_id:0}).sort({year:1}).limit(1)
db.movieDetails.find({},{title:1,_id:0}).sort({year:-1}).limit(1)
db.movieDetails.findOne()
db.movieDetails.find({},{title:1,actors:1,_id:0}).skip(100).limit(1)
db.movieDetails.find({},{title:1,acteurs:1,_id:0}).skip(100).limit(1)
db.movieDetails.find(){},{title:1,acteurs:1,_id:0}).skip(100).limit(1)
db.movieDetails.count()
db.movieDetails.find({},{title:1,genres:1,_id:0}).sort({genres:1}).skip(82).limit(15)
it
db.movieDetails.find({},{title:1,genres:1,_id:0}).sort({genres:1})
db.movies.findOne()
  it
db.movies.find({},{title:1,genres:1,_id:0}).sort({genres:1})
db.movies.find({},{title:1,year:1,_id:0})
show collections
use video
db.boeken.find()
db.boeken.updateOne({_id:'A003'},{$set:{boek:[db.boeken.findOne({_id:'A003'}).boek,{titel:'Predikant',jaar:2004},{titel:'Steenhouwer',jaar:2005}]}})
db.boeken.updateOne({_id:'A003'},{$push:{boek:{$each:[{titel:'Predikant',jaar:2004},{titel:'Steenhouwer',jaar:2005}]}}})
db.boeken.find()
db.boeken.insertOne({_id:'A003',auteur:'Camilla Lackberg',boek:{titel:'Ijsprinses',jaar:2003}})
db.boeken.find()
db.boeken.updateOne({_id:'A001'},{$push:{boek:{titel:'Gerechtigheid',jaar:2007}}})
db.boeken.find()
db.boeken.insertOne({_id:'A002',auteur:['Wiebe Van der Zee','Bert Van der Zee'],boek:{titel:'Success met Big Data',jaar:2016,uitgeverij:'Van Duuren Media B.V.'}})
db.boeken.find()
db.films.find()
db.boeken.insertOne({_id:'A001',auteur:'Stieg Larsson',boek:[{titel:'Mannen die vrouwen haten',jaar:2005},{titel:'De vrouw die met vuur speelde', jaar:2006}]})
db.boeken.insertOne({_id:'A001',auteur:'Stieg Larsson',boek:{{titel:'Mannen die vrouwen haten',jaar:2005},{titel:'De vrouw die met vuur speelde', jaar:2006}}})
db.films.find()
db.films.updateMany({director:'Erik Van Looy'},{$set:{genre:'thriller'}})
db.films.find()
db.films.updateOne({naam:'Dune'},{$push:{acteurs:{$each:['Rebecca Ferguson','Jason Momoa']}}})
db.films.find()
db.films.updateOne({naam:'Dune'},{$set:{jaar:2021}})
db.films.insertOne({naam:'Dune',acteurs:['Timothee Chalamet','Zendaya']})
db.films.find()
db.films.updateOne({naam:'De Premier'},{$set:{jaar:2016}})
db.films.find()
db.films.insertOne({naam:'De Premier',jaar:2015,acteurs:['Koen De Bouw','Tine Reymer'],director:'Erik Van Looy'})
db.films.insertOne({naam:'De Premier',jaar:2015,acteurs:['Koen De Bouw','Tine Reymer'],director:'Erik Van Looy
db.films.find()
db.films.updateOne({naam:'Loft'},{$set:{acteurs:['Koen De Bouw','Filip Peeters','Matthias Schonaerts']}})
db.films.find()
db.films.insertOne({naam:'Loft',jaar:2008,acteurs:['Koen De Bouw', 'Filip Peeters'],director:'Erik Van Looy'})
db.films.find()
db.films.updateOne({naam:'Iedereen beroemd'},{$set:{acteurs:['Josse De Pauw','Eva van der Gucht','Werner de Smet']}})
db.films.updateOne({naam:'Iedereen beroemd'},{$set:{{acteurs:['Josse De Pauw','Eva van der Gucht','Werner de Smet']}})
db.films.find()
db.films.insertOne({naam:'Iedereen beroemd',jaar:2000})
db.films.find()
db.films.drop()
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$set:{supporters:{personeel:50,studenten:150}}})
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$push:{supporters:[personeel:50,studenten: 150]}})
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$push:{supporters:[{personeel:50},{studenten: 150}]}})
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'PXL'},{$set:{team:'Hogeschool PXL'}})
db.studentenregatta.find()
db.studentenregatta.insertOne({_id:'001',team:'PXL',aantal_likes:820,teamleden:9})
db.studentenregatta.find()
db.studentenregatta.insertMany([{_id:'002',team:'UCL',teamleden:8},{_id:'003',team:'Uhasselt',aantal_likes:8}])
db.studentenregatta.insertMany({_id:'002',team:'UCL',teamleden:8},{_id:'003',team:'Uhasselt',aantal_likes:8})
db.studentenregatta.insertOne({id:'001',team:'PXL',aantal_likes:820,teamleden:9})
show collections
db.createCollection('studentenregatta')
show collections
db.films.find()
db.films.insertOne({id:'001',team:'PXL',aantal_likes:820,teamleden:9})
db.films.find()
show collections
db.showCollections()
use 2TINdb
use 2Tindb
db.movieDetails.find({rated: 'UNRATED'}).count()
db.movieDetails.find({rating:'unrated'})
db.movieDetails.find({rating:'UNRATED'}).count()
db.movieDetails.find({rating: 'UNRATED'}).count()
db.movieDetails.find({rating: 'UNRATED').count()
db.movieDetails.find({rating: null}).count()
db.movieDetails.find({rating: null})
db.movieDetails.find(rating: null)
db.movieDetails.find({director:'Stanley Kubrick'}).count()
db.movieDetails.find({director:'Stanley Kubrick'})
db.movieDetails.find({'countries.1': 'Italy', countries:{$size:2}},{title:1, countries:1})
db.movieDetails.find({'countries.0': 'Italy', countries:{$size:2}},{title:1, countries:1})
db.movieDetails.find({'countries': 'Italy', countries:{$size:2}},{title:1, countries:1})
db.movieDetails.find({'countries.0': 'Italy', countries:{$size:2}},{title:1, countries:1})
db.movieDetails.find({$or:[{$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0})
db.movieDetails.find({$and:[{title:/west/},{year:2012}]},{title:1, year:1, _id:0})
db.movieDetails.find({'tomato.consensus': {$exists:true}}).count()
db.movieDetails.find({'tomato.consensus': {$ne:null}}).count()
db.movieDetails.find({rated: {$ne:null}}).count()
db.movieDetails.find({rated: {ne:null}}).count()
db.movieDetails.find({rated: null}).count()
db.movieDetails.find({rated:{$exists: null}}).count()
db.movieDetails.find({rated:{$exists: true}}).count()
db.movieDetails.find({rated:{$exists: true}})
db.movieDetails.countDocuments()
db.movieDetails.find({$or:[{$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0})
db.movieDetails.find({$or[:{$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0})
db.movieDetails.find({$or[:{$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0}})
db.movieDetails.find({$or:{[$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0}})
db.movieDetails.find({$or:{[$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0})
db.movieDetails.find({$or:[$and:[{title:/west/},{year:2012}]}, {year:{$lt:2000}}]},{title:1, year:1, _id:0})
db.movieDetails.find({title:/west/i,title:/the/i},{title:1, year:1, _id:0})
db.movieDetails.find({title:/west/i,title:/the/i},{year:2012},{title:1, year:1, _id:0})
db.movieDetails.find({title:/west/i},{year:2012},{title:1, year:1, _id:0})
db.movieDetails.find({title:/west/i},{year:2012}},{title:1, year:1, _id:0})
db.movieDetails.find({$or:[{title:/west/i},{year:2012}]},{title:1, year:1, _id:0})
db.movieDetails.find({$and:[{title:/west/},{year:2012}]},{title:1, year:1, _id:0})
use video
db.movieDetails.find({$and:[{title:/west/},{year:2012}]},{title:1, year:1, _id:0})
db.movieDetails.find({$or:[{title:/west/i},{year:2012}]},{title:1, year:1, _id:0})
db.movieDetails.find({$and:[{title:/west/i},{year:2012}]},{title:1, year:1, _id:0})
use videos
db.movieDetails.find({countries:{$size:3}},{title:1, countries: 1, _id:0})
db.movieDetails.find({'countries.0': 'Italy'},{title:1, countries: 1, _id:0})
db.movieDetails.find({'countries.0': 'Italy'},{title:1, countries: 1})
db.movieDetails.find({genres:{$all:['Drama','Romance']}},{title:1,genres:1})
db.movieDetails.find({genres:['Drama','Romance']},{title:1,genres:1})
db.movieDetails.find({'tomato.meter':{$gt:80}})
db.movieetails.find({'tomato.meter':{$gt:80}})
db.movieDetails.find({rated:{$exists:true}}).count()
db.movies.find({year:{$nin:[2012,2015]}}).count()
db.movies.find({year:{$in:[2012,2015]}}).count()
db.movies.find({year:{$in:[2012,2015]}})
db.movies.find({year:1982}).count()
db.movies.find({year:1982})
db.movieDetails.find({},{title:1}).skip(99).limit(1).sort({year:1})
db.movieDetails.find({},{title:1}).skip(99).limit(1).sort({release:1})
db.movieDetails.find({},{title:1}).skip(99).limit(1).sort({release:-1})
db.movieDetails.find({},{title:1}).skip(99).limit(1)
db.movieDetails.find({},{title:1}).skip(100).limit(1)
db.movieDetails.find({}).skip(100).limit(1)
db.movieDetails.countDocuments()
db.movieDetails.find({},{title:1,genres:1}).sort({genres:1}).skip(82).limit(15)
db.movieDetails.find({},{title:1,genres:1}).sort({genres:1}).skip(82)
it
db.movieDetails.find({},{title:1,genres:1}).sort({genres:1})
db.movieDetails.find({},{title:1,genres:1}).sort()
db.movieDetails.find({},{title:1,genres:1}).sort({genres})
db.movieDetails.find({},{title:1,genres:1}).sort({genres:1})
db.movieDetails.find({},{title:1,genres:1}).sort({genres:1}).count()
db.movieDetails.find({},{title:1,genres:1})
db.movieDetails.find({},{title:1,genres:1}).sort({genres:1})
db.movieDetails.findOne()
db.movieDetails.find({},{title:1,genre:1}).sort({genre:1})
db.movieDetails.find({}, { title: 1, director: 1, countries: 1 }).forEach(function (doc) { const reorderedFields = { title: doc.title, director: doc.director, countries: doc.countries }; console.log(reorderedFields); });
db.movieDetails.find({},{title:1,director:1,countries:1})
db.movieDetails.find({},{title:1,countries:1,director:1})
db.movieDetails.findOne()
db.movieDetails.find({}, {title:1,released:1})
db.movieDetails.findOne()
db.movies.findOne()
db.movieDetails.find({title:/West$/i},{title: 1})
db.movieDetails.find({title:/^West/i},{title: 1})
db.movieDetails.find({title:/West/i},{title: 1})
db.movieDetails.find({title:/West/},{title: 1})
db.movieDetails.find({runtime:{$gt:120,$lt:180}}, {title: 1})
db.movieDetails.find({runtime:{$gt:120},$lt:180}}, {title: 1})
db.movieDetails.find({runtime:{$gt:120},$lt:180}}, {title: 1, actors: 1})
db.movieDetails.find({runetime:{$gt:120},$lt:180}}, {title: 1, actors: 1})
db.movieDetails.find({runetime:{$gt:120},$lt:180}, {title: 1, actors: 1})
db.movieDetails.find({actors: 'Charles Bronson'}, {title: 1, actors: 1})
db.movieDetails.find){actors: 'Charles Bronson'}, {title: 1, actors: 1}
db.movieDetails.findOne()
db.movieDetailsfindOne()
db.movies.find({year:2000}).count()
db.movies.countDocuments()
db.movies.find({},{year: 1, title:1, _id:0}).skip(9).limit(1).sort({year:1})
db.movies.find({},{year: 1, title:1, _id:0}).skip(9).limit(1)
db.movies.find({},{year: 1, title:1, _id:0}).sort({year:1}).limit(3)
db.movies.find({},{year: 1, title:1, _id:0}).sort({year:1})
db.movies.find({},{year: 1, title:1, _id:0})
db.movies.find({},{title:1,year:1, _id:0})
db.movies.find({},{title:1,year:1}, _id:0)
db.movies.find({},{title:1,year:1})
db.movies.find({},{title;1,year:1})
use video
show dbs
db.films.find()
db.films.updateOne({naam:'Dune'},{$push:{acteurs:{$each:['Rebecca Ferguson','Jason Momoa']}}})
db.films.find()
db.films.updateOne({naam:'Dune'},{$set:{jaar:2021}})
db.films.find()
db.films.insertOne({naam: 'Dune', acteurs:['Timothee Chalamet','Zendaya']})
db.films.find()
db.films.updateOne({naam:'De Premier'},{$set:{jaar:2016}})
db.films.find()
db.films.insertOne({naam:'De Premier', jaar:2015, acteurs:['Koen De Bouw', 'Tine Reymer'],director:'Erik Van Looy'})
db.films.find()
db.films.updateOne({naam:'Loft'},{$set:{acteurs:['Koen De Bouw', 'Filip Peeters', 'Matthias Schonaerts']}})
db.films.find()
db.films.updateOne({naam:'Loft'},{$unset:{acteurs:['Matthias Schonaerts']}})
db.films.find()
db.films.updateOne({naam:'Loft'},{$push:{acteurs:'Matthias Schonaerts'}})
db.films.find()
db.films.updateOne({naam:'Loft'},{$push:{acteurs:['Matthias Schonaerts']}})
db.films.find()
db.films.insertOne({naam:'Loft',jaar:2008,acteurs:['Koen De Bouw','Filip Peeters'],director:'Erik Van Looy'})
db.films.find()
db.films.updateOne({naam: 'Iedereen beroemd'},{$set:{acteurs:['Josse De Pauw', 'Eva Van Der Gucht', 'Werner De Smedt']}})
db.films.find()
show collections
db.films.insertOne({naam: 'Iedereen beroemd', jaar: 2000})
show collections
show dbs
db.studentenregatta.drop()
db.studentregatta.drop()
db.studenteregatta.drop()
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$set:{supporters:{personeel:50,studenten:150}}})
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$unset:{supporters:[{personeel:50},{studenten:150}]}})
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$push:{suppor ;
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$unset:{supporters db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$push:{suppor
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$unset:{supporters}})
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'Hogeschool PXL'},{$push:{supporters:[{personeel:50},{studenten:150}]}})
db.studentenregatta.find()
db.studentenregatta.updateOne({team:'PXL'},{$set:{team:'Hogeschool PXL'}})
db.studentenregatta.updateOne({team:'PXL'},{$set{team:'Hogeschool PXL'}})
db.studentenregatta.find()
db.studentenregatta.insertMany([{_id:'002', team:'UCL', teamleden:8},{_id:'003', team:'Uhasselt',aantal_likes:400}])
db.insertMany([{_id:'002', team:'UCL', teamleden:8},{_id:'003', team:'Uhasselt',aantal_likes:400}])
db.studentenregatta.find()
show collections
db.2TINdb.showCollections()
db.showCollections()
db.showCollections();
use 2TINdb
show dbs
db.studentenregatta.find()
db.studentenregatta.insertOne({_id: '001', team: 'PXL', aantal_likes: 820, teamleden: 9}) 
db.studentenregatta.find()
show dbs
db.2TINdb.showCollections()
db.createCollection('studentenregatta')
use 2TINdb
show dbs
show collections
db.friends.updateOne({naam: 'Green'},{$set:{verjaardag: new Date('1970-05-05')}})
db.friends.find()
db.friends.updateMany({},{$set:{nationaliteit: 'Amerikaan'}})
db.friends.updateOne({naam: 'Geller', vnaam: 'Ross'},{$set:{kind:'Emma'}})
db.friends.updateOne({naam: 'Geller', vnaam: 'Roos'},{$set:{kind:'Emma'}})
db.friends.find()
db.friends.updateOne({naam: 'Geller', vnaam: 'Roos'},{$set:{kind:'Emma'}})
db.friends.updateOne({naam: 'Geller'},{$unset:{kind:'Emma'}})
db.friends.find()
db.friends.updateOne({naam: 'Geller'},{$set:{kind:'Emma'}})
db.friends.updateOne({naam: 'Buffay'},{$push:{hobby:{$each:['tennis', 'lezen']}}})
db.friends.updateOne({naam: 'Buffay'},{$push:{hobby:{$each:['tennis', 'lezen']}}}})
db.friends.updateOne({naam: 'Buffay'},{$push:{hobby:['optreden']}})
db.friends.updateOne({naam: 'Buffay'},{push:{hobby:['optreden']}})
db.friends.find()
db.friends.updateOne({naam: 'Buffay'},{$set:{hobby:['gitaar spelen', 'zingen']}})
db.friends.updateOne({naam: 'Buffay'},{$set:{hobby:['gitaar spelen', 'zingen'}})
db.friends.find()
db.friends.updateOne({naam: 'Buffay'},{$set:{hobby: 'zingen'}})
db.friends.find()
db.friends.updateOne({naam: 'Green'},{$set:{zus: 'Amy'}})
db.friends.deleteMany({vnaam: 'Mike'})
db.friends.deleteOne({vnaam: 'Phoebe'})
db.friends.insertMany([{naam: 'Buffay', vnaam: 'Phoebe', hobby: 'gitaar spelen'},{naam: 'Hannigan', vnaam: 'Mike'}])
db.friends.find()
db.friends.deleteOne({})
db.friends.find()
db.friends.insertMany([{naam: 'Buffay', vnaam: 'Phoebe', hobby: 'gitaar spelen'},{naam: 'Hannigan', vnaam: 'Mike'}])
db.friends.find()
db.friends.insertOne({naam: 'Tribbiani', vnaam: 'Joey', adres:[{straat: 'Dorpstraat', huisnr: 456, pc: 3500, gemeente: 'Zolder'}, {straat: 'Bosstraat', huisnr: 101, pc: 3590, gemeente: 'Diepenbeek'}]})
db.friends.insertOne({naam: 'Green', vnaam: 'Rachel', hobby:['winkelen', 'joggen']})
db.friends.insertOne({naam: 'Geller', vnaam: 'Ross', adres:{straat: 'Kerkstraat', huisnr: 123, pc:3500, gemeente: 'Zolder'}, hobby: 'dino'})
db.friends.insertOne({naam: 'Geller', vnaam: 'Ross', adres:{straat: 'Kerkstraat', huisnr: 123, pc:3500, gemeente 'Zolder'}, hobby: 'dino'})
db.friends.find()
db.friends.insertOne({vnaam: 'Green', naam: 'Rachel', hobby:['winkelen', 'joggen']})
db.friends.insertOne({vnaam: 'Green', naam: 'Rachel'})
db.friends.find()
db.friends.insertOne({vnaam: 'Monica', naam: 'Geller'})
db.friends.find()
db.friends.insertOne({naam: 'Bing', vnaam: 'Chandler'})
show collections
db.createCollection('friends')
db.createCollection(friends)
use testdb
db.dropDatabase()
show dbs
use testdb
show dbs